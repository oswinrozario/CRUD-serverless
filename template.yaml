AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM Template for CRUD API with DynamoDB backend

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 30

Resources:
  ToDoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ToDoTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CreateToDoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.create_todo
      CodeUri: src/
      Environment:
        Variables:
          TABLE_NAME: !Ref ToDoTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /todo
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTable

  GetToDoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.get_todo
      CodeUri: src/
      Environment:
        Variables:
          TABLE_NAME: !Ref ToDoTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /todo/{id}
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ToDoTable

  UpdateToDoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.update_todo
      CodeUri: src/
      Environment:
        Variables:
          TABLE_NAME: !Ref ToDoTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /todo/{id}
            Method: put
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTable

  DeleteToDoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.delete_todo
      CodeUri: src/
      Environment:
        Variables:
          TABLE_NAME: !Ref ToDoTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /todo/{id}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTable

# IAM Roles for Lambda Functions with unique IDs
  CreateToDoFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CreateToDoFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt ToDoTable.Arn

  GetToDoFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GetToDoFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt ToDoTable.Arn

  UpdateToDoFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: UpdateToDoFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt ToDoTable.Arn

  DeleteToDoFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DeleteToDoFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                Resource: !GetAtt ToDoTable.Arn
